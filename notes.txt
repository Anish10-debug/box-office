Python Data structures
1) try and except method:-
try:
....
except:
....
try is the normal part of the program. If there is some error in the statement under "try" then the statement under 
"except" will be executed.

2)startswith() - checks whether thhe string starts with a particular word or substring.
rstrip()- is used to remove any blank spaces at the end of the string.
split()- is used to break the entire string into different elements and inserted into a list.
fruit='banana'
if n in fruit:
	print(fruit,"is there")
Here "in" is used to test whether the given letter is present in a particular string.
.lower()- converts upper case to lower case.
.find('n') - finds the position of 'n' in a string.
.replace(old string, new string) - replaces old with new string.

3)to open any file:
fhand=open('xyz'.txt,mode)
"open" is for letting the compiler know which file should be opened and "mode" is to specify whether it is in
read or write mode.



MySQL on XAMPP:-
Basic commands:-

CREATE DATABASE User DEFAULT CHARACTER SET utf8

CREATE TABLE people(
name varchar(255),
email varchar(255)
);


ORACLE PASSWORD-10Ganeshasha

INSERT INTO people(name,email) VALUES('xyz','agbhaiajdnaodj')

DELETE FROM people

DELETE FROM people where name='xyz'

UPDATE people SET name='pqr' where name='xyz'

SELECT * FROM people where name='pqr'

SELECT last_name AS "name", commision_pct "comm"

SELECT 'The salary of' || Last_name ||'is' || Salary from employees;

SELECT DISTINCT department_id FROM employees;

SELECT COUNT(*) FROM people where name='xyz'

SELECT * FROM people ORDER BY name 

SELECT * FROM people where name LIKE 'x';
select first_name from employees where first_name like 'S%'; (starts with s % denotes 0 or many chars)
select first_name from employees where first_name like '%n';(name ends with n)
select first_name from employees where first_name like '_o%';(second letter is o)

select first_name from employees where manager_id is NULL; (manager id not assigned)

select * from employees where manager_id in(100,101,102);

select * from employees order by hire_date DESC; (descending order)

select lower(last_name),upper(last_name),initcap(last_name) from employees; (uppercase lowercase etc)
select concat(last_name,first_name) from employees;
select concat('hello','dbms') from dual;  (from dummy table)
select length(concat(first_name,last_name)) from employees;   (for finding length of word)
select substr('HELLOWORLD',1,5) from dual;  (for string slicing form 1 to 5)
select  instr('HELLOWORLD','R') from dual;   (for finding index of a letter)



select lpad(salary,10,'*'), rpad(salary,10,'*') from employees;    (*****23131,23131*****)
select trim('H' from 'HELLOWORLD') from dual;     ('ELLOWORLD');
select trim('H' from 'HELLOWORLD'), replace('HELLOWORLD','HELLO','BYE') from dual;


select round(45.926,2), trunc(45.926,2), mod(1600,300) from dual;      (roundoff 45,93,truncate last digit 45.92, remainder 100)
select sysdate from dual;   (current date)
select last_name,hire_date,(sysdate-hire_date)/365 as Total experience in years from employees;
select months_between(sysdate,hire_date) from dual;
select add_months(sysdate,6) from dual;
select next_day(sysdate,'friday') from dual;





create table demo(
PRN number primary key,
Sname varchar2(20) not null,
email varchar2(20) constraint email_w unique,
class varchar2(15),
marks number check (marks>=70),
deptno number, foreign key(deptno) references dept(deptno))


alter is used for changing the table

alter tablename
add(address varchar(20))  		//used for adding column

 
alter tablename
modify(pin varhar2(5)) 			//used for channging datatype of column and can be used for adding constraint

Similary, 
drop column pin				//for dropping the column	


update tablename			//updating contents of table
set manager_id=101 where employee_id=198



select department_id, AVG(salary) from employees group by department_id having avg(salary)<=100000   //for finding average of one whole deparment

PL SQL COMMANDS

DECLARE
v_employee_id employees.employee_id%type;
v_last_name varchar2(20):='Kochhar';
BEGIN
SELECT employee_id
INTO v_employee_id 
FROM employees 
WHERE last_name=v_last_name;
DBMS_OUTPUT.PUT_LINE(v_employee_id);
END;



IOT PROJECT:-
Blueooth version of the device under use = 4.1(Using BLE Scanner)
Bluetooth scan 1 - -71 was found for the device named "KD-43X8500c". Signal is much lower than 0dbm.
		    Another available device was n/a having RSSI value as -51. The MAC address for the above mentioned device is
                    A8:A7:95:7F:47:74. Connection -  Bonded.
		   		
		    Raw DATA is identified as 0x1DDFF2D010200011040A21221B..... which are the hexadecimal digits containing the packet contents.
	            According to the RSSI values "KD.." device kept fluctating between "Near" and "Far" whereas "n/a" was located at "Near" region.
		    	

(IP addresses are not completely mentioned due to security reasons)
(Using network detector)Wifi Network analyzer - External IP - N/A
			Default Gateway IP- 192.168.1....
			Internal IP- 192.168.1.2....  (Internal Adress)
			SSID- 12			(Wifi Name)
			Channel - 6			(PHY Channel)
			Signal strength - -49dbm	(RSSI)
			Speed- 65mbps 		(Link Data rate)
After performing the LAN Scan, 3 Wifi channel signals were detected. 
Frequency-2.4GHz
Strongest wifi signal- "12"
Weakest Wifi singal- "Kushal"
Channel graph was also obtained for the 3 wifi channel signals.
After sending ping to the gateway several results were obtained:-
192.168.1.. - 9.1 ms
192.168.1.. - 16.2 ms
192.168.1.. - 17.1 ms
192.168.1.. - 11.4 ms
192.168.1.. - 1.9 ms


USING PYTHON TO ACCESS WEB DATA:-

1) REGULAR EXPRESSIONS
import re

[] 	A set of characters 		
\ 	Signals a special sequence (can also be used to escape special characters) 		
. 	Any character (except newline character) 	 	
^ 	Starts with 	 	
$ 	Ends with 		
* 	Zero or more occurrences 	
+ 	One or more occurrences 		
{} 	Exactly the specified number of occurrences 		
| 	Either or 		
() 	Capture and group


2)NETWORK AND SCOKETS

import socket

mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    #socket is created
mysock.connect(('data.pr4e.org', 80))				#socket gets connected to a page where '80' is the common port for http.
cmd = 'GET http://data.pr4e.org/romeo.txt HTTP/1.0\r\n\r\n'.encode()  #encode is used to convert utf8 character set to bytes.
mysock.send(cmd)    #sends the value i.e data in 'cmd' to mysock function

while True:
    data = mysock.recv(512)
    if len(data) < 1:
        break
    print(data.decode(),end='')    #decode is used to convert bytes to unicode

mysock.close()



3)Beautifulsoup is used for web scraping so that we can retrieve the data from the HTML, XML or JSON documents.
It is mainly used for parsing the web pages.

4)XML (extensible markup language)

Sample XML code
<note>
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>


Sample XML schema

<xs:element name="shipto">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="address" type="xs:string"/>
      <xs:element name="city" type="xs:string"/>
      <xs:element name="country" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element> 



sample code:-
import xml.etree.ElementTree as ET

input = '''
<stuff>
  <users>
    <user x="2">
      <id>001</id>
      <name>Chuck</name>
    </user>
    <user x="7">
      <id>009</id>
      <name>Brent</name>
    </user>
  </users>
</stuff>'''

stuff = ET.fromstring(input)
lst = stuff.findall('users/user')
print('User count:', len(lst))

for item in lst:
    print('Name', item.find('name').text)
    print('Id', item.find('id').text)
    print('Attribute', item.get('x'))



dvchikmurge@comp.maepune.ac.in




